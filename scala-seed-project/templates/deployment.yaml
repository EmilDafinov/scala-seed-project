apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Chart.Name }}
  namespace: default
  labels:
    app: {{ .Chart.Name }}
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: {{ .Chart.Name }}
  template:
    metadata:
      labels:
        app: {{ .Chart.Name }}
    spec:
      initContainers:
        - name: wait-for-pg
          image: busybox:latest
          imagePullPolicy: IfNotPresent
          command: [ 'sh', '-c', 'until nc -vz {{ .Values.postgres.service.name }} {{ .Values.postgres.service.port }}; do echo "Waiting for postgres..."; sleep 3; done;' ]
        - name: flyway
          image: docker.io/library/scala-seed-project-flyway
          env:
            - name: FLYWAY_USER
              value: {{ .Values.postgres.user }}
            - name: FLYWAY_PASSWORD
              value: {{ .Values.postgres.password }}
            - name: FLYWAY_URL
              value: "jdbc:postgresql://{{ .Values.postgres.service.name }}:{{ .Values.postgres.service.port }}/postgres?ApplicationName=Flyway"
          command: ['sh', '-c', 'flyway migrate']
        - name: wait-for-kafka
          image: busybox:latest
          imagePullPolicy: IfNotPresent
          command: [ 'sh', '-c', 'until nc -vz {{ .Values.kafka.cluster.name }}-kafka-bootstrap 9092; do echo "Waiting for kafka..."; sleep 3; done;' ]
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: application-conf
              mountPath: /config
          env:
            - name: JAVA_TOOL_OPTIONS
              value: "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005"
            - name: JAVA_OPTS
              value: "-server -Xms384m -Xmx384m -XX:MaxMetaspaceSize=96m -Dconfig.file=/config/application.conf"
            - name: EVENTS_TOPIC
              value: {{ .Values.kafka.topics.events }}
            - name: EVENT_GROUPS_TOPIC
              value: {{ .Values.kafka.topics.event_groups }}
            - name: DB_HOST
              value: {{ .Values.postgres.service.name }}
            - name: DB_PORT
              value: "{{ .Values.postgres.service.port }}"
            - name: DB_USER
              value: {{ .Values.postgres.user }}
            - name: DB_PASSWORD
              value: {{ .Values.postgres.password }}
            - name: KAFKA_BOOTSTRAP_SERVER
              value: "{{ .Values.kafka.cluster.name }}-kafka-bootstrap:9092"
          ports:
            - containerPort: 9000
              name: service-port
            - containerPort: 5005
              name: debug-port
          livenessProbe:
            httpGet:
              path: /health
              port: service-port
              scheme: HTTP
            initialDelaySeconds: 5
            timeoutSeconds: 2
          readinessProbe:
            httpGet:
              path: /health
              port: service-port
            initialDelaySeconds: 5
            timeoutSeconds: 2
      volumes:
        - name: application-conf
          configMap:
            name: {{ .Chart.Name }}-config

